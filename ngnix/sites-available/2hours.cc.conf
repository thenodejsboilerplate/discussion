#second-level domain setting and Static Content Caching With NGINX, we do the first server block here
server {
				#By default, Nginx will listen for HTTP connections on port 80.
				listen 80;

				## Make site accessible from http://localhost/
				server_name 2hours.cc www.2hours.cc;

        #need to build for yourself: mkdir logs/vim trver.access.log
        access_log  /var/log/2hours.access.log;

        #static caching with nginx begins here:

        #configure directory where server should look for the static files:
        root /apps/discussion/public;

        #In order to serve the dynamic content properly we specify the following instructions that allow sending query and IP variables
        proxy_set_header X-Real-IP  $remote_addr;
				proxy_set_header X-Forwarded-For $remote_addr;
				proxy_set_header X-Forwarded-Proto $scheme;
				proxy_set_header Host $host;

	    	#The next step will be to define processed extensions of static content files.
				location ~* .(ico|jpg|png|gif|jpeg|css|swf|js|woff)$ {

							#We disable logging of static content (increases content delivery speed and reduces the size of log files).
						access_log off;

						#enable gzip compression and do not forget to enable 'gizip on' in  the nginx.conf file
						gzip_static on;

						#Most favorable compression size is 5
						gzip_comp_level 5;


						#specify cache lifetime,- cached files will be stored by the client?~@~Ys browser for 1 month
						expires 1M;

						#Directive «private» allows only browser caching, while publlic option tells to any invisible proxies to cache our content as well: http:///blog.belvg.com/cache-control-header.html.
						add_header Cache-Control private;

						#Adding a header to see the cache status in the browser: X-Cache-Status: HIT means the page is being served by the NGiNX cache.X-Cache-Status: BYPASS means it was bypassed / not cached by NGiNX

						add_header X-Cache-Status $upstream_cache_status;

						# reference the cache in a location that uses proxy_pass
						proxy_cache mycache;
            #Then we try to deliver the requested file or if it is not found ?~@~T pass request to the dynamic processor:
            try_files $uri @proxy;
        }


         #In the end we should specify server address for processing dynamic content:

				location @proxy {

						### - we proxy a query to the dynamic server.
						proxy_pass http://117.48.214.70:3000;
						#include    sites-available/module/basic-http or: ;
						proxy_http_version 1.1;
						proxy_set_header Upgrade $http_upgrade;
						proxy_set_header Connection 'upgrade';
						proxy_set_header Host $host;
						proxy_cache_bypass $http_upgrade;

						# reference the cache in a location that uses proxy_pass
						proxy_cache mycache;

				}

				location ~ {

						proxy_pass http://117.48.214.70:3000;

						#include    sites-available/module/basic-http or: ;
						proxy_http_version 1.1;
						proxy_set_header Upgrade $http_upgrade;
						proxy_set_header Connection 'upgrade';
						proxy_set_header Host $host;
						proxy_cache_bypass $http_upgrade;

						# reference the cache in a location that uses proxy_pass
						proxy_cache mycache;
				}

}





